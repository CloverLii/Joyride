{"name":"Joyride","tagline":"A cross platform mobile framework for automating acceptance tests using appium","body":"\r\n\r\n# Motivation\r\n\r\nYou have the same mobile application across ios and android.  As both the apps evolve, you want to write automated acceptance tests and ensure feature parity between the two.  With Joyride you can write beautiful specs sharing the same underlying code!  \r\n\r\nThe typical use cases include sharing the same \"steps\" code and underlying business models, thereby simplifying much of the duplicated work had you worked with two separate projects.  \r\n\r\nJoyride attempts to supply much of the boilerplate code with \"good defaults\" to get you quickly started.  \r\n\r\nGet excited and jump start you automation efforts!  \r\n\r\n# Overview\r\n\r\nJoyride follows the same tried-and-true \"pageobjects\" pattern adopted  for mobile.  It supplies basic touch gestures in interacting with native and hybrid mobile applications.  This is built on top of [Appium](http://appium.io). \r\n\r\nCombined with Joyride.Specflow, the Behaviour Driven Development (BDD) binding layer, it supplies a stock of useful actions such as gestures (swipe, scroll, tap, etc) \r\n\r\n\r\n# Features\r\n\r\nHere are some of the features included with Joyride\r\n\r\n- Built-in starter configuration to quickly get you up and running.\r\n- Support for mostly native actions for ios and android.  Currently hybrid apps have limited support thus far.\r\n- Handling of collection of elements\r\n- Smart element and collection mappings\r\n- Predefined steps for interacting with different widgets such as checkboxes, entering text, etc.\r\n- Handling of modal dialogs\r\n- Detection of modal dialogs and screens\r\n- Predefined debugging steps \r\n- Predefined gestures steps\r\n- Screen captures on error\r\n- ios and android specific steps.  For example, android has a \"back\" button.\r\n- And more...\r\n\r\n# Examples\r\n\r\nJoyride.Specflow makes use of gherkin syntax for a human-readable specification.  \r\n\r\nAdd the appropriate tag to add platform specific steps\r\n\r\n```gherkin\r\n# Comment out and add the appropriate tag for your platform\r\n# @android or @ios\r\nFeature: My First Feature\r\n\tIn order to do usercase on my app\r\n\tAs a user\r\n\tI want to be do X\r\n```\r\n\r\nHere are some examples of the specifications you can write:\r\n\r\n```gherkin\r\nScenario: Should be able to tap the item by index in a collection\r\nGiven I tap the \"App\" button\r\nAnd I tap the \"Fragment\" button\r\nAnd I tap the \"Context Menu\" button\r\nAnd I tap the \"Long Press\" button and hold for \"4\" seconds\r\nWhen I tap the \"2nd\" item in the \"Menu\" collection\r\nThen I should be on the \"Context Menu\" screen\r\n```\r\n\r\n```gherkin\r\nScenario: Should see title containing text in modal dialog\r\nGiven I tap the \"App\" button\r\nAnd I tap the \"Alert Dialogs\" button\r\nWhen I tap the \"Ok Cancel Dialog\" button\r\nThen I should see the \"Lorem Ipsum\" modal dialog containing title text \"Plloaso mako nuto siwuf\"\r\n\r\n```\r\n\r\n```gherkin\r\nScenario: Should be able to double tap \r\nGiven I tap the \"Animation\" button\r\nAnd I tap the \"Default Layout Animations\" button\r\nWhen I double tap the \"Add Button\" button\r\nThen I should see \"2\" items in \"Buttons\" collection\r\n```\r\n\r\n# Installation\r\n\r\nYou can install the packages via nuget's Package Manager Console\r\n\r\n```\r\nPM> Install-Package Joyride\r\nPM> Install-Package Joyride.Specflow\r\n```\r\n\r\n### Dependencies\r\n\r\n* Humanizer\r\n* PredicateParser\r\n* HandyConfig\r\n* Appium.WebDriver\r\n* Selenium.WebDriver\r\n* Selenium.Support\r\n* Newtonsoft.Json\r\n* NUnit\r\n* SpecFlow\r\n* SpecFlow.NUnit\r\n\r\n\r\n\r\nMore to come... stay tuned!!!\r\n\r\n\r\n\r\nHave fun! \r\n\r\nGlory\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}