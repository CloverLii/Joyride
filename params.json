{"name":"Joyride","tagline":"A cross platform mobile framework for automating acceptance tests using appium","body":"\r\n![](https://raw.githubusercontent.com/glorylo/Joyride/develop/Assets/images/icon_joyride.png)\r\n\r\n\r\n# Motivation\r\n\r\nYou have the same mobile application across ios and android.  You want to write automated acceptance tests and ensure feature parity between the two.  With Joyride you can write near identical specs for both apps sharing much of the underlying code.   \r\n\r\nYou can also leverage shared code between the two test suites.  The typical use cases include sharing business models, user profiles, and so on thereby simplifying much of the duplicated work had you worked with two separate projects.  \r\n\r\nJoyride attempts to supply much of the boilerplate code with \"good defaults\" to get you quickly started.  \r\n\r\nGet excited and jump start you automation efforts!  \r\n\r\n# Overview\r\n\r\nJoyride follows the same tried-and-true \"pageobjects\" pattern adopted for mobile.  It supplies basic touch gestures in interacting with native and hybrid mobile applications.  This is built on top of [Appium](http://appium.io). \r\n\r\nCombined with Joyride.Specflow, the Behaviour Driven Development (BDD) binding layer, your human readable specs fully come to life with the use of gherkin syntax.  Joyride.Specflow also supplies a stock of useful steps for common actions and gestures (swipe, scroll, tap, etc).\r\n\r\nYou can then overlay any screen with application specific features via interfaces.  For example, you have an android and ios app, and you have a login screen.  You create a shared interface called ILogin like so:\r\n\r\n```csharp\r\n    public interface ILogin\r\n    {\r\n        Screen LoginAs(string name, string password);\r\n    }\r\n```   \r\n\r\nYou then create a *LoginScreen* for both android and ios implementing the *ILogin* interface.  Create a binding custom step to use the method to this interface like:\r\n\r\n```csharp\r\n   [Given(@\"I login as user \"\"([^\"\"]*)\"\" with password \"\"([^\"\"]*)\"\"\")]\r\n   [When(@\"I login as user \"\"([^\"\"]*)\"\" with password \"\"([^\"\"]*)\"\"\")]\r\n   public void GivenILogin(string username, string password)\r\n   {\r\n       Context.MobileApp.Do<ILogin>(i => i.LoginAs(username, password));\r\n   }\r\n```\r\n\r\nYour specs for Android look like:\r\n```gherkin\r\nScenario: Should Login in successfully \r\nGiven I launch the \"My Cool Android App\" mobile application\r\nAnd I login as user \"tommy\" with password \"secret\"\r\n...\r\n  \r\n```\r\n\r\nYour specs for iOS look like:\r\n\r\n```gherkin\r\nScenario: Should Login in successfully \r\nGiven I launch the \"My Cool iOS App\" mobile application\r\nAnd I login as user \"tommy\" with password \"secret\"\r\n...\r\n  \r\n```\r\n\r\nIn fact, Joyride achieves much of the cross platform compatibility in the same manner.  Here's the actual code for \"tap\" and \"swipe\".\r\n\r\n```csharp\r\n   [Given(@\"I tap the \"\"([^\"\"]*)\"\" (?:button|field|label|element|link)\")]\r\n   [When(@\"I tap the \"\"([^\"\"]*)\"\" (?:button|field|label|element|link)\")]\r\n   public void WhenITapTheButton(string elementName)\r\n   {\r\n      Context.MobileApp.Do<IGesture>(i => i.Tap(elementName));\r\n   }\r\n```\r\n\r\n```csharp\r\n   [Given(@\"I swipe the screen (left|right|up|down)\")]\r\n   [When(@\"I swipe the screen (left|right|up|down)\")]\r\n   public void GivenISwipeScreenInDirection(string direction)\r\n   {\r\n       var dir = (Direction) Enum.Parse(typeof(Direction), direction, true);\r\n       Context.MobileApp.Do<IGesture>(i => i.Swipe(dir));\r\n   }\r\n```\r\n\r\nYour specs using \"tap\" and \"swipe\" steps:\r\n```gherkin\r\nGiven I tap the \"Inbox\" button\r\nAnd I swipe the screen right\r\n```\r\n\r\n\r\n# Features\r\n\r\nHere are some of the features included with Joyride\r\n\r\n- Built-in starter configuration to quickly get you up and running.\r\n- Support for mostly native actions for ios and android.  Currently hybrid apps have limited support.\r\n- Handling of collection of elements\r\n- Smart element and collection mappings\r\n- Predefined steps for interacting with different widgets such as checkboxes, entering text, etc.\r\n- Handling of modal dialogs\r\n- Detection of modal dialogs and screens\r\n- Predefined debugging steps \r\n- Predefined gestures steps\r\n- Screen captures on error\r\n- ios and android specific steps.  For example, android has a \"back\" button\r\n- And more...\r\n\r\n# Examples \r\n\r\n\r\nAdd the appropriate tag to add platform specific steps\r\n\r\n```gherkin\r\n# Comment out and add the appropriate tag for your platform\r\n# @android or @ios\r\nFeature: My First Feature\r\n\tIn order to do usercase on my app\r\n\tAs a user\r\n\tI want to be do X\r\n```\r\n\r\nHere are some examples of the specifications you can write, all using Joyride's predefined steps:\r\n\r\n```gherkin\r\nScenario: Should see the following elements\r\nGiven I tap the \"App\" button\r\nThen I should see the following elements\r\n| Element      |\r\n| Activity     |\r\n| Fragment     |\r\n| Notification |\r\n```\r\n\r\n```gherkin\r\nScenario: Should be able to tap the item by index in a collection\r\nGiven I tap the \"App\" button\r\nAnd I tap the \"Fragment\" button\r\nAnd I tap the \"Context Menu\" button\r\nAnd I tap the \"Long Press\" button and hold for \"4\" seconds\r\nWhen I tap the \"2nd\" item in the \"Menu\" collection\r\nThen I should be on the \"Context Menu\" screen\r\n```\r\n\r\n```gherkin\r\nScenario Outline: Respond to with the long message modal dialog \r\nGiven I tap the \"App\" button\r\nAnd I tap the \"Alert Dialogs\" button\r\nAnd I tap the \"Ok Cancel Dialog With Long Message\" button\r\nWhen I respond to the \"Long Message\" modal dialog with \"<response>\"\r\nThen I should be on the \"Alert Dialogs\" screen\r\n\r\nExamples: \r\n| response  |\r\n| Something |\r\n| Ok        |\r\n| Cancel    |\r\n\r\n```\r\n\r\n```gherkin\r\nScenario: Should be able to double tap \r\nGiven I tap the \"Animation\" button\r\nAnd I tap the \"Default Layout Animations\" button\r\nWhen I double tap the \"Add Button\" button\r\nThen I should see \"2\" items in \"Buttons\" collection\r\n```\r\n\r\nSee a listing of the [Predefined Steps](https://github.com/glorylo/Joyride/blob/develop/docs/PredefinedSteps.md),\r\n[Ios Steps](https://github.com/glorylo/Joyride/blob/develop/docs/IosPredefinedSteps.md), [Android Steps](https://github.com/glorylo/Joyride/blob/develop/docs/AndroidPredefinedSteps.md), and [Webview Steps](https://github.com/glorylo/Joyride/blob/develop/docs/WebviewPredefinedSteps.md) \r\n\r\n# Installation\r\n\r\nYou can install the core packages via nuget's Package Manager Console\r\n\r\n```\r\nPM> Install-Package Joyride\r\nPM> Install-Package Joyride.Specflow\r\n```\r\n\r\nYou can also install the starter package for your project:\r\n```\r\nPM> Install-Package Joyride.Starter\r\n```\r\n\r\n\r\n### Current Versions\r\n\r\nJoyride:  ![#](https://img.shields.io/nuget/v/Joyride.svg?style=flat)</div><br/>\r\nJoyride.Specflow:  ![#](https://img.shields.io/nuget/v/Joyride.Specflow.svg?style=flat)</div><br/>\r\nJoyride.Starter:  ![#](https://img.shields.io/nuget/v/Joyride.Starter.svg?style=flat)</div><br/>\r\n\r\n### Dependencies\r\n\r\n* Humanizer\r\n* PredicateParser\r\n* HandyConfig\r\n* Appium.WebDriver\r\n* Selenium.WebDriver\r\n* Selenium.Support\r\n* Newtonsoft.Json\r\n* NUnit\r\n* SpecFlow\r\n* SpecFlow.NUnit\r\n\r\n\r\n\r\n# Resources\r\n\r\n- [Getting Started](https://github.com/glorylo/Joyride/blob/develop/docs/GettingStarted.md)\r\n- [Creating Your First Screen](https://github.com/glorylo/Joyride/blob/develop/docs/CreatingYourFirstScreen.md)\r\n- [Element And Collection Mappings](https://github.com/glorylo/Joyride/blob/develop/docs/ElementAndCollectionMappings.md)\r\n- [Gestures](https://github.com/glorylo/Joyride/blob/develop/docs/Gestures.md)\r\n- [Handling Modal Dialogs](https://github.com/glorylo/Joyride/blob/develop/docs/HandlingModalDialogs.md)\r\n- [Screen Detection](https://github.com/glorylo/Joyride/blob/develop/docs/ScreenDetection.md) \r\n- [Creating Shared Custom Steps](https://github.com/glorylo/Joyride/blob/develop/docs/CreatingSharedCustomSteps.md)\r\n- [Predefined Steps](https://github.com/glorylo/Joyride/blob/develop/docs/PredefinedSteps.md)\r\n   - [Ios Steps](https://github.com/glorylo/Joyride/blob/develop/docs/IosPredefinedSteps.md)\r\n   - [Android Steps](https://github.com/glorylo/Joyride/blob/develop/docs/AndroidPredefinedSteps.md)\r\n   - [Webview Steps](https://github.com/glorylo/Joyride/blob/develop/docs/WebviewPredefinedSteps.md)\r\n\r\n\r\n# License\r\n\r\nJoyride uses the BSD License.\r\n\r\n\r\n\r\nHave fun! \r\n\r\nGlory\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}